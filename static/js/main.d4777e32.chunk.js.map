{"version":3,"sources":["index.js"],"names":["Workingbox","props","state","history","pixelDataHU","pixelDataGray","dicomLoaded","dicomFilename","windowCenter","windowWidth","width","height","xPos","yPos","addPoint","bind","updateCoordinates","undoHistory","handleKeyDown","getCurrentContours","getIntensity","incrementContours","loadDicom","e","keyCode","this","document","addEventListener","removeEventListener","setState","slice","dicomDrawn","console","log","length","lastHistory","currentContourIdx","currentContour","contours","isContourValid","newContourIdx","concat","x","y","idx","file","reader","FileReader","onload","arrayBuffer","target","result","byteArray","filename","updateDicomImage","updateDicom","Uint8Array","name","readAsArrayBuffer","dataSet","dicomParser","parseDicom","pixelDataElement","elements","x7fe00010","rows","parseInt","uint16","columns","parseFloat","string","rescaleIntercept","rescaleSlope","pixelDataUint16","Uint16Array","buffer","dataOffset","Int32Array","from","quantize","huArray","huMin","huMax","truncated","map","rgba","Uint8ClampedArray","i","className","Slice","fileName","onAddPoint","onMouseMove","Toolbox","wc","ww","hu","currentContours","onAnnotationDownlod","onUploadFile","React","Component","handleMouseDown","handleMouseMove","handleMouseUp","drawing","imageData","draw","canvas","refs","ctx","getContext","clearRect","putImageData","fillStyle","fillRect","imgData","getImageData","historyNumber","strokeStyle","beginPath","contour","moveTo","j","lineTo","stroke","closePath","button","rect","getBoundingClientRect","clientX","left","Math","min","max","clientY","top","ref","onMouseDown","onMouseUp","fileInput","createRef","handleDownloadAnnotationClick","handleUploadFile","filter","dataStr","encodeURIComponent","JSON","stringify","element","createElement","setAttribute","click","files","current","onClick","type","onChange","style","display","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.d4777e32.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport dicomParser from 'dicom-parser';\nimport './index.css';\n\n/****************************************************************************/\n/* Top-level component that has Slice and the Toolbox controlled components */\n/****************************************************************************/  \nclass Workingbox extends React.Component {\n\n    constructor(props){\n      super(props);\n      \n      // initialize state variables\n      this.state = {history: [],  // history: [{contours: [ [[x1, y1],[x2, y2],[x3, y3]], [[x1, y1],[x2, y2]] ], currentContourIdx: 1}]}\n                    pixelDataHU: [],\n                    pixelDataGray: [],      \n                    dicomLoaded: false,   \n                    dicomFilename: '-',      \n                    windowCenter: null,\n                    windowWidth: null,     \n                    width: 512,\n                    height: 512,\n                    xPos: null,\n                    yPos: null} \n\n      // bindings\n      this.addPoint = this.addPoint.bind(this);\n      this.updateCoordinates = this.updateCoordinates.bind(this);      \n      this.undoHistory = this.undoHistory.bind(this)\n      this.handleKeyDown = this.handleKeyDown.bind(this)      \n      this.getCurrentContours = this.getCurrentContours.bind(this)\n      this.getIntensity = this.getIntensity.bind(this)\n      this.incrementContours = this.incrementContours.bind(this)\n      this.loadDicom = this.loadDicom.bind(this)\n    }\n\n    handleKeyDown(e){\n      if(e.keyCode === 27) {\n        // Esc\n        this.undoHistory()\n      } else if (e.keyCode === 78){\n        //Ctrl + N \n        this.incrementContours()\n      }\n    }\n\n    componentDidMount(){\n      document.addEventListener(\"keydown\", this.handleKeyDown, false);\n    }\n\n    componentWillUnmount(){\n      document.removeEventListener(\"keydown\", this.handleKeyDown, false);\n    }\n\n    undoHistory(){\n      const history = this.state.history\n      this.setState({history: history.slice(0,-1), dicomDrawn: false})\n    }\n\n    incrementContours() {\n      const history = this.state.history\n      console.log(history)\n      if (history.length > 0){\n        const lastHistory = history[history.length-1]\n        const currentContourIdx = lastHistory.currentContourIdx\n        const currentContour = lastHistory.contours[currentContourIdx]\n        if (currentContour && isContourValid(currentContour)){\n          // only increments a new contour if the current one is valid.\n          const newContourIdx = currentContourIdx+1\n          this.setState({history: history.concat({contours: lastHistory.contours.slice(), currentContourIdx: newContourIdx})})\n        }\n      }\n    }\n\n    addPoint(x, y){\n      if (this.state.pixelDataGray.length === 0){\n        console.log('please upload DICOM file')\n        return 0;\n      } \n      const history = this.state.history\n      let contours = []\n      if (history.length === 0){\n        // first point ever\n        contours = [[[x,y]]]\n        this.setState({history: history.concat({contours: contours, currentContourIdx: 0})})\n      } else {\n        const lastHistory = history[history.length-1]\n        const currentContourIdx =  lastHistory.currentContourIdx\n        let contours = lastHistory.contours.slice()\n        if (currentContourIdx === (lastHistory.contours.length-1)){\n          // current contour is the last contour\n          contours[currentContourIdx] = contours[currentContourIdx].concat([[x, y]])\n        } else {\n          // current contour is a new contour to be created\n          contours = contours.concat([[[x, y]]])\n        }\n        this.setState({history: history.concat({contours: contours, currentContourIdx: currentContourIdx})})\n      }\n    }\n\n    updateCoordinates(x, y){\n      this.setState({xPos: x, yPos: y})\n    }\n\n    getCurrentContours(){\n      return (this.state.history.length > 0) ? (this.state.history[this.state.history.length-1].contours) : []\n    }\n\n    getIntensity(x, y){\n      console.log('entrou')\n      if ((this.state.pixelDataHU.length !== 0) && (this.state.xPos !== -1) && (this.state.yPos !== -1)){\n        const idx = this.state.xPos + (this.state.yPos * this.state.width)\n        return this.state.pixelDataHU[idx]\n      } else {\n        return null\n      }\n    }\n\n    loadDicom(file){\n      const reader = new FileReader()\n      const updateDicom = (byteArray, filename) => this.updateDicomImage(byteArray, filename)\n\n      reader.onload = function(e) {\n        const arrayBuffer = e.target.result\n        const byteArray = new Uint8Array(arrayBuffer)\n        updateDicom(byteArray, file.name.slice(0, -4))\n      }\n\n      reader.readAsArrayBuffer(file)      \n    }\n\n    updateDicomImage(byteArray, filename){\n\n      const dataSet = dicomParser.parseDicom(byteArray/*, options */)\n      const pixelDataElement = dataSet.elements.x7fe00010\n      const rows = parseInt(dataSet.uint16('x00280010'))\n      const columns = parseInt(dataSet.uint16('x00280011'))\n      const windowCenter = parseFloat(dataSet.string('x00281050'))\n      const windowWidth = parseFloat(dataSet.string('x00281051'))\n      const rescaleIntercept = parseInt(dataSet.string('x00281052'))\n      const rescaleSlope = parseInt(dataSet.string('x00281053'))\n  \n      \n      // Converts to 16-bit array because DICOM bits allocated is 16-bit.\n      // Important: needs to divide length by two since each 2 bytes makes a 16-bit pixel.\n      //            https://github.com/cornerstonejs/dicomParser/issues/73#issuecomment-404851437\n      const pixelDataUint16 = new Uint16Array(dataSet.byteArray.buffer, pixelDataElement.dataOffset, pixelDataElement.length / 2)\n      const pixelDataHU = Int32Array.from(pixelDataUint16, (x) => (x * rescaleSlope) + rescaleIntercept)\n      const pixelDataGray = this.quantize(pixelDataHU, windowCenter, windowWidth)\n      // const pixelDataRGBA = this.grayscaleToRGBA(pixelDataGray)\n\n      this.setState({history: [], pixelDataHU: pixelDataHU, pixelDataGray: pixelDataGray, dicomLoaded: true, \n                    windowCenter: windowCenter, windowWidth: windowWidth, dicomFilename: filename, width: columns, height: rows})\n    }\n\n    quantize(huArray, windowCenter, windowWidth){\n      const huMin = windowCenter - 0.5 * windowWidth\n      const huMax = windowCenter + 0.5 * windowWidth\n      const truncated = huArray.map((x) => (x>huMax)?huMax:(x<huMin)?huMin:x)\n      return Uint8Array.from(truncated, (x) => ( ((x-huMin) * 255)/windowWidth) )\n    }\n\n    grayscaleToRGBA(pixelDataGray){\n      let rgba = new Uint8ClampedArray(this.state.width * this.state.height * 4)\n      for (let i = 0; i < pixelDataGray.length; i++){\n        const idx = i * 4\n        rgba[idx] = pixelDataGray[i]\n        rgba[idx+1] = pixelDataGray[i]\n        rgba[idx+2] = pixelDataGray[i]                \n        rgba[idx+3] = 1\n      }\n      return rgba\n    }\n  \n    render() {\n      return (\n        <div className=\"annotator\">\n          <div className=\"titlebox\">DICOM Annotator App</div>\n          <div className=\"workingbox\">\n            <Slice history={this.state.history} width={this.state.width} height={this.state.height} \n                   fileName={this.state.dicomFilename} pixelDataGray={this.state.pixelDataGray} dicomLoaded={this.state.dicomLoaded}\n                  onAddPoint={this.addPoint} onMouseMove={this.updateCoordinates}/>\n            <Toolbox wc={this.state.windowCenter} ww={this.state.windowWidth} xPos={this.state.xPos} yPos={this.state.yPos} \n                     fileName={this.state.dicomFilename} hu= {this.getIntensity()} currentContours={this.getCurrentContours()} \n                     onAnnotationDownlod={this.incrementContours} onUploadFile={this.loadDicom}/>\n          </div>\n          <div className=\"footerbox\">\n              Mouse left-click: annotate<br />\n              Esc: undo <br />\n              N: create new annotation\n          </div>\n        </div>\n      );\n    }\n    \n  }\n  \n  /************************************************/\n  /* Slice component is where all drawing happens */\n  /************************************************/\n  class Slice extends React.Component {\n\n    constructor(props){\n      super(props)\n      this.handleMouseDown = this.handleMouseDown.bind(this)\n      this.handleMouseMove = this.handleMouseMove.bind(this)\n      this.handleMouseUp = this.handleMouseUp.bind(this)\n      this.state = {\n        drawing: false,\n        imageData: null,\n        fileName: null\n      }\n    }\n\n    componentDidUpdate() {\n      this.draw()\n    }\n\n    draw(){\n      const canvas = this.refs.canvas\n      const ctx = canvas.getContext(\"2d\")\n      \n      // draw image\n      if (this.props.dicomLoaded){\n        ctx.clearRect(0, 0, canvas.width, canvas.height)\n\n        if ((this.state.imageData != null) && (this.state.fileName === this.props.fileName)){\n          // if image has already been drawn, it is reused.\n          ctx.putImageData(this.state.imageData, 0, 0)\n        }else{\n          // if it is the first time after the image is loaded we draw it ***\n          const pixelDataGray = this.props.pixelDataGray\n          for(let x = 0; x < canvas.width; x++){\n            for (let y = 0; y < canvas.height; y++){\n              const idx = (y * canvas.width) + x\n              ctx.fillStyle = \"rgba(\"+pixelDataGray[idx]+\",\"+pixelDataGray[idx]+\",\"+pixelDataGray[idx]+\",\"+1+\")\"\n              ctx.fillRect(x, y, 1, 1)\n            }\n          }\n          const imgData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n          this.setState({imageData: imgData, fileName: this.props.fileName})\n        }\n      } \n      // TODO: Need to refactor in *** to use putImageData based on pixelDataRGBA instead of painting each pixel\n      // Reference: https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial/Pixel_manipulation_with_canvas\n\n      // draw contours\n      const history = this.props.history\n\n      if (history.length > 0){\n        const historyNumber = history.length-1         \n        const contours = history[historyNumber].contours\n        const currentContourIdx = history[historyNumber].currentContourIdx\n\n        ctx.strokeStyle = \"red\"\n        ctx.fillStyle = \"red\"\n  \n        for (let i = 0; i < contours.length; i++){  \n          // draw the contour lines\n          ctx.beginPath()\n          const contour = contours[i]\n          ctx.moveTo(contour[0][0], contour[0][1])\n          ctx.fillRect(contour[0][0], contour[0][1], 1, 1 ) // draws contours' first pixel\n  \n          for (let j = 0; j < contour.length; j++){\n            ctx.lineTo(contour[j][0], contour[j][1])\n          }\n  \n          // closes the contour if it isn't the last one\n          if (i !== currentContourIdx)\n            ctx.lineTo(contour[0][0], contour[0][1])\n  \n          ctx.stroke();\n          ctx.closePath();\n        }\n\n      } \n      \n\n    }\n      \n    handleMouseDown(e){\n      if (e.button ===0)\n        this.setState({drawing: true})\n    }\n\n    handleMouseMove(e){\n      const canvas = this.refs.canvas\n      const rect = canvas.getBoundingClientRect()\n      let x = e.clientX - rect.left\n      x = Math.min(Math.max(parseInt(x), 0), canvas.width-1) // hack to keep value between bondaries\n      let y = e.clientY - rect.top\n      y = Math.min(Math.max(parseInt(y), 0), canvas.height-1) // hack to keep value between bondaries\n      this.props.onMouseMove(x, y)\n      if (this.state.drawing){\n        this.props.onAddPoint(x, y)\n      }\n    }\n\n    handleMouseUp(e){\n      if (e.button === 0){\n        const canvas = this.refs.canvas\n        const rect = canvas.getBoundingClientRect()\n        const x = e.clientX - rect.left\n        const y = e.clientY - rect.top\n        this.props.onAddPoint(x, y)\n        this.setState({drawing: false})\n      }\n    }\n\n    render(){\n      return (\n        <div className=\"slice\">\n          <canvas ref=\"canvas\" width={this.props.width} height={this.props.height} className=\"slice-canvas\"  \n                  // onContextMenu={(e)=> {e.preventDefault()}} \n                  onMouseMove={this.handleMouseMove} \n                  onMouseDown={this.handleMouseDown} \n                  onMouseUp={this.handleMouseUp} />\n          <img ref=\"dicom\" className=\"hidden\" />\n        </div>      \n      )\n    }\n\n  }\n\n  /*******************************************************/\n  /* Toolbox component where the summary and buttons are */\n  /*******************************************************/\n  class Toolbox extends React.Component{\n    constructor(props){\n      super(props)\n      this.fileInput = React.createRef()\n      this.handleDownloadAnnotationClick = this.handleDownloadAnnotationClick.bind(this)\n      this.handleUploadFile = this.handleUploadFile.bind(this)\n    }\n    \n    handleDownloadAnnotationClick(e){\n      const contours = this.props.currentContours.filter(isContourValid)\n      if (contours.length > 0){\n        const dataStr = \"data:text/json;charset=utf-8,\" + encodeURIComponent(JSON.stringify(contours))\n        const element = document.createElement(\"a\")\n        element.setAttribute(\"href\",     dataStr     )\n        element.setAttribute(\"download\", (this.props.fileName + \".json\"))\n        element.click()\n        this.props.onAnnotationDownlod()\n      }\n    }\n\n    handleUploadFile(e){\n      const files = this.fileInput.current.files\n      if (files.length > 0){        \n        const file = files[0]\n        this.props.onUploadFile(file)\n      }\n    }\n\n    render(){\n      return (\n        <div className=\"toolbox\">\n          <div className=\"summary\">\n            <div>{this.props.fileName}</div>             \n            <div>x: {this.props.xPos}</div>\n            <div>y: {this.props.yPos}</div>\n            <div>hu: {this.props.hu}</div>           \n            <div>wc: {this.props.wc}</div>    \n            <div>ww: {this.props.ww}</div>                \n          </div>\n          <div className=\"upload-dicom-button\">\n              <button onClick={() => this.fileInput.current.click()}>Upload Dicom File</button>\n              <input type=\"file\" onChange={this.handleUploadFile} ref={this.fileInput} style={{ display: \"none\" }} />\n          </div>\n          <div className=\"download-annotation-button\">\n              <button onClick={this.handleDownloadAnnotationClick}>Download Annotation</button>\n          </div>                    \n          \n          {/* TODO: Add load segmentation option */}\n          {/* <div className=\"upload-annotation-button\">upload annotation</div> */}\n        </div>\n      )\n    }\n  }\n\n  ReactDOM.render(\n    <Workingbox />,\n    document.getElementById('root')\n  );\n\n\n/* general utility */\nfunction isContourValid(contour){\n  return (contour.length < 3)?false:true\n}"],"sourceRoot":""}